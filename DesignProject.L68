00002000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 4/4/2017 5:57:29 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Design Project v1
00000000                             3  * Written by : Mete Morris
00000000                             4  * Date       : 03.11.2017
00000000                             5  * Description: Prints out prompt, does help(not finished) and exit
00000000                             6  * To-Do      : exit prompt when null character read
00000000                             7  *-----------------------------------------------------------
00001000                             8      ORG    $1000
00001000                             9  *COMMAND LINE PROMPT*  
00001000                            10  PROMPT:   
00001000= 4D 4F 4E 49 54 4F ...     11      DC.B 'MONITOR441> '
0000100C= 00                        12      DC.B 0
0000100D                            13  
0000100D                            14  NOPROMPT:
0000100D= 57 52 4F 4E 47 20 ...     15      DC.B 'WRONG ENTRY. TYPE HELP FOR HELP'
0000102C= 00                        16      DC.B 0
0000102D                            17  
0000102D                            18  
0000102D                            19  *MENU OPTIONS LOOKUP*
0000102D                            20  HELPPROMPT:
0000102D= 48 45 4C 50               21      DC.B 'HELP'
00001031= 00                        22      DC.B 0    
00001032                            23  MDSPPROMPT:
00001032= 4D 44 53 50               24      DC.B 'MDSP'
00001036= 00                        25      DC.B 0
00001037                            26  SORTWPROMPT:
00001037= 53 4F 52 54 57            27      DC.B 'SORTW'
0000103C= 00                        28      DC.B 0
0000103D                            29  MMPROMPT:
0000103D= 4D 4D                     30      DC.B 'MM'
0000103F= 00                        31      DC.B 0
00001040                            32  MSPROMPT:
00001040= 4D 53                     33      DC.B 'MS'
00001042= 00                        34      DC.B 0
00001043                            35  BFPROMPT:
00001043= 42 46                     36      DC.B 'BF'
00001045= 00                        37      DC.B 0
00001046                            38  BMOVPROMPT:
00001046= 42 4D 4F 56               39      DC.B 'BMOV'
0000104A= 00                        40      DC.B 0
0000104B                            41  BTSTPROMPT:
0000104B= 42 54 53 54               42      DC.B 'BTST'
0000104F= 00                        43      DC.B 0
00001050                            44  BSCHPROMPT:
00001050= 42 53 43 48               45      DC.B 'BSCH'
00001054= 00                        46      DC.B 0
00001055                            47  GOPROMPT:
00001055= 47 4F                     48      DC.B 'GO'
00001057= 00                        49      DC.B 0
00001058                            50  DFPROMPT:
00001058= 44 46                     51      DC.B 'DF'
0000105A= 00                        52      DC.B 0
0000105B                            53  EXITPROMPT:
0000105B= 45 58 49 54               54      DC.B 'EXIT'
0000105F= 00                        55      DC.B 0
00001060                            56  
00001060                            57  *HELP LINE TO BE PRINTED OUT*  
00001060                            58  HELP:
00001060= 48 45 4C 50               59      DC.B 'HELP'
00001064= 0A                        60      DC.B $A  ;NEW LINE
00001065= 44 49 53 50 4C 41 ...     61      DC.B 'DISPLAYS ALL AVAILABE COMMANDS AND USAGE DESCRIPTION '
0000109A= 0D                        62      DC.B $D  ;CARRIAGE RETURN
0000109B= 0A                        63      DC.B $A
0000109C= 0A                        64      DC.B $A
0000109D= 4D 44 53 50               65      DC.B 'MDSP'
000010A1= 0D                        66      DC.B $D  
000010A2= 0A                        67      DC.B $A
000010A3= 09                        68      DC.B $9 ;TAB
000010A4= 54 68 65 20 4D 44 ...     69      DC.B 'The MDSP(MemoryDisplay)command outputs the address and memory'
000010E1= 0D                        70      DC.B $D  
000010E2= 0A                        71      DC.B $A
000010E3= 09                        72      DC.B $9
000010E4= 63 6F 6E 74 65 6E ...     73      DC.B 'contents from <address1> to <address2>. '
0000110C= 0D                        74      DC.B $D  
0000110D= 0A                        75      DC.B $A
0000110E= 09                        76      DC.B $9
0000110F= 54 68 65 20 4D 44 ...     77      DC.B 'The MDSP(Memory Display) command ALSO outputs the address and'
0000114C= 0D                        78      DC.B $D  
0000114D= 0A                        79      DC.B $A
0000114E= 09                        80      DC.B $9
0000114F= 6D 65 6D 6F 72 79 ...     81      DC.B 'memory contents from <address1> to <address1+16bytes>.' 
00001185= 0D                        82      DC.B $D  
00001186= 0A                        83      DC.B $A
00001187= 0A                        84      DC.B $A
00001188= 53 4F 52 54 57            85      DC.B 'SORTW'
0000118D= 0D                        86      DC.B $D  
0000118E= 0A                        87      DC.B $A
0000118F= 09                        88      DC.B $9 
00001190= 54 68 65 20 53 4F ...     89      DC.B 'The SORT command sorts a block of memory. The starting address and the'
000011D6= 0D                        90      DC.B $D  
000011D7= 0A                        91      DC.B $A
000011D8= 09                        92      DC.B $9
000011D9= 65 6E 64 69 6E 67 ...     93      DC.B 'ending address <address2> of the memory block are specified in the command.'
00001224= 0D                        94      DC.B $D  
00001225= 0A                        95      DC.B $A
00001226= 09                        96      DC.B $9
00001227= 54 68 65 20 6F 72 ...     97      DC.B 'The order(A or D) specifies whether the list is sorted in Ascending'
0000126A= 0D                        98      DC.B $D  
0000126B= 0A                        99      DC.B $A
0000126C= 09                       100      DC.B $9
0000126D= 6F 72 20 44 65 73 ...    101      DC.B 'or Descending order.(The size of the data to be sorted is a word)'
000012AE                           102      
000012AE                           103      
000012AE= 0D                       104      DC.B $D  
000012AF= 0A                       105      DC.B $A
000012B0= 0A                       106      DC.B $A
000012B1= 4D 4D                    107      DC.B 'MM'
000012B3= 0D                       108      DC.B $D  
000012B4= 0A                       109      DC.B $A
000012B5= 09                       110      DC.B $9 
000012B6= 4D 4D 28 4D 45 4D ...    111      DC.B 'MM(MEMORY MODIFY)is used to display memory and,   as required, modify'
000012F9= 0D                       112      DC.B $D  
000012FA= 0A                       113      DC.B $A
000012FB= 09                       114      DC.B $9
000012FC= 64 61 74 61 20 6F ...    115      DC.B 'data or enter new data. The size (byte, word, long word) controls the'
00001341= 0D                       116      DC.B $D  
00001342= 0A                       117      DC.B $A
00001343= 09                       118      DC.B $9
00001344= 6E 75 6D 62 65 72 ...    119      DC.B 'number of bytes displayed for each address.'    
0000136F                           120      
0000136F= 0D                       121      DC.B $D  
00001370= 0A                       122      DC.B $A
00001371= 0A                       123      DC.B $A
00001372= 4D 53                    124      DC.B 'MS'
00001374= 0D                       125      DC.B $D  
00001375= 0A                       126      DC.B $A
00001376= 09                       127      DC.B $9 
00001377= 54 68 65 20 4D 53 ...    128      DC.B 'The MS (Memory Set) command alters memmory by setting data into the'
000013BA= 0D                       129      DC.B $D  
000013BB= 0A                       130      DC.B $A
000013BC= 09                       131      DC.B $9
000013BD= 61 64 64 72 65 73 ...    132      DC.B 'address specified. The data can take the form of ASCII string or'
000013FD= 0D                       133      DC.B $D  
000013FE= 0A                       134      DC.B $A
000013FF= 09                       135      DC.B $9
00001400= 68 65 78 61 64 65 ...    136      DC.B 'hexadecimal data.'
00001411                           137  
00001411= 0D                       138      DC.B $D  
00001412= 0A                       139      DC.B $A
00001413= 0A                       140      DC.B $A
00001414= 42 46                    141      DC.B 'BF'
00001416= 0D                       142      DC.B $D  
00001417= 0A                       143      DC.B $A
00001418= 09                       144      DC.B $9 
00001419= 54 68 65 20 42 6C ...    145      DC.B 'The Block Fill (BF) command fills memory starting with the word'
00001458= 0D                       146      DC.B $D  
00001459= 0A                       147      DC.B $A
0000145A= 09                       148      DC.B $9
0000145B= 62 6F 75 6E 64 61 ...    149      DC.B 'boundary <address1> through <address2>. Both <address1> and <address2> must'
000014A6= 0D                       150      DC.B $D  
000014A7= 0A                       151      DC.B $A
000014A8= 09                       152      DC.B $9
000014A9= 62 65 20 65 76 65 ...    153      DC.B 'be even   addresses. This command only fills with a word-size (2 bytes) data'
000014F3= 0D                       154      DC.B $D  
000014F4= 0A                       155      DC.B $A
000014F5= 09                       156      DC.B $9
000014F6= 70 61 74 74 65 72 ...    157      DC.B 'pattern. If an entire word-size data pattern is not entered, the pattern is '
00001542= 0D                       158      DC.B $D  
00001543= 0A                       159      DC.B $A
00001544= 09                       160      DC.B $9
00001545= 72 69 67 68 74 20 ...    161      DC.B 'right justified and leading zeros are inserted.'
00001574                           162  
00001574= 0D                       163      DC.B $D  
00001575= 0A                       164      DC.B $A
00001576= 0A                       165      DC.B $A
00001577= 42 4D 4F 56              166      DC.B 'BMOV'
0000157B= 0D                       167      DC.B $D  
0000157C= 0A                       168      DC.B $A
0000157D= 09                       169      DC.B $9 
0000157E= 54 68 65 20 42 6C ...    170      DC.B 'The Block Move (BMOV) command is used to move (duplicate) blocks of'
000015C1= 0D                       171      DC.B $D  
000015C2= 0A                       172      DC.B $A
000015C3= 09                       173      DC.B $9
000015C4= 6D 65 6D 6F 72 79 ...    174      DC.B 'memory from one area to another.'
000015E4                           175  
000015E4= 0D                       176      DC.B $D  
000015E5= 0A                       177      DC.B $A
000015E6= 0A                       178      DC.B $A
000015E7= 42 54 53 54              179      DC.B 'BTST'
000015EB= 0D                       180      DC.B $D  
000015EC= 0A                       181      DC.B $A
000015ED= 09                       182      DC.B $9 
000015EE= 54 68 65 20 42 6C ...    183      DC.B 'The Block Test (BT) command is a destructive test of a block of'
0000162D= 0D                       184      DC.B $D  
0000162E= 0A                       185      DC.B $A
0000162F= 09                       186      DC.B $9
00001630= 6D 65 6D 6F 72 79 ...    187      DC.B 'memory beginning at <address1> through <address2>. If this test'
0000166F= 0D                       188      DC.B $D  
00001670= 0A                       189      DC.B $A
00001671= 09                       190      DC.B $9
00001672= 72 75 6E 73 20 74 ...    191      DC.B 'runs to completion without detecting errors, and display a message'
000016B4= 0D                       192      DC.B $D  
000016B5= 0A                       193      DC.B $A
000016B6= 09                       194      DC.B $9
000016B7= 74 68 61 74 20 6E ...    195      DC.B 'that no error was detected. If memory problems are found, a message is'    
000016FD= 0D                       196      DC.B $D  
000016FE= 0A                       197      DC.B $A
000016FF= 09                       198      DC.B $9
00001700= 64 69 73 70 6C 61 ...    199      DC.B 'displayed indicating  the address, the data stored, and the data read'
00001744= 0D                       200      DC.B $D  
00001745= 0A                       201      DC.B $A
00001746= 09                       202      DC.B $9
00001747= 6F 66 20 74 68 65 ...    203      DC.B 'of the failing memory.'
0000175D                           204  
0000175D                           205   
0000175D                           206   
0000175D= 0D                       207      DC.B $D  
0000175E= 0A                       208      DC.B $A
0000175F= 0A                       209      DC.B $A
00001760= 42 53 43 48              210      DC.B 'BSCH'
00001764= 0D                       211      DC.B $D  
00001765= 0A                       212      DC.B $A
00001766= 09                       213      DC.B $9 
00001767= 54 68 65 20 42 53 ...    214      DC.B 'The BSCH (Block   Search) command is used to search a literal string in'
000017AC= 0D                       215      DC.B $D  
000017AD= 0A                       216      DC.B $A
000017AE= 09                       217      DC.B $9
000017AF= 61 20 6D 65 6D 6F ...    218      DC.B 'a memory block starting at <address1> through <address2> both inclusive.'
000017F7= 0D                       219      DC.B $D  
000017F8= 0A                       220      DC.B $A
000017F9= 09                       221      DC.B $9
000017FA= 49 6E 20 42 53 43 ...    222      DC.B 'In BSCH command, if search finds matching data, the data and address(es)'
00001842= 0D                       223      DC.B $D  
00001843= 0A                       224      DC.B $A
00001844= 09                       225      DC.B $9
00001845= 6D 75 73 74 20 62 ...    226      DC.B 'must be displayed.' 
00001857                           227  
00001857                           228  
00001857= 0D                       229      DC.B $D  
00001858= 0A                       230      DC.B $A
00001859= 0A                       231      DC.B $A
0000185A= 47 4F                    232      DC.B 'GO'
0000185C= 0D                       233      DC.B $D  
0000185D= 0A                       234      DC.B $A
0000185E= 09                       235      DC.B $9 
0000185F= 54 68 65 20 47 4F ...    236      DC.B 'The GO command is used to start execution from a given address.'
0000189E                           237  
0000189E= 0D                       238      DC.B $D  
0000189F= 0A                       239      DC.B $A
000018A0= 0A                       240      DC.B $A
000018A1= 44 46                    241      DC.B 'DF'
000018A3= 0D                       242      DC.B $D  
000018A4= 0A                       243      DC.B $A
000018A5= 09                       244      DC.B $9 
000018A6= 54 68 65 20 44 69 ...    245      DC.B 'The Display Formatted Registers(DF) command is used to display'
000018E4= 0D                       246      DC.B $D  
000018E5= 0A                       247      DC.B $A
000018E6= 09                       248      DC.B $9
000018E7= 74 68 65 20 4D 43 ...    249      DC.B 'the MC68000 processor registers. This command should display current'
0000192B= 0D                       250      DC.B $D  
0000192C= 0A                       251      DC.B $A
0000192D= 09                       252      DC.B $9
0000192E= 50 43 2C 20 53 52 ...    253      DC.B 'PC, SR,   US, SS and D, A registers.'
00001950                           254      
00001950= 0D                       255      DC.B $D  
00001951= 0A                       256      DC.B $A
00001952= 0A                       257      DC.B $A
00001953= 45 58 49 54              258      DC.B 'EXIT'
00001957= 0D                       259      DC.B $D  
00001958= 0A                       260      DC.B $A
00001959= 09                       261      DC.B $9 
0000195A= 54 68 65 20 45 58 ...    262      DC.B 'The EXIT command terminates/exits your MONITOR program'
00001990                           263  
00001990                           264   
00001990= 00                       265      DC.B 0
00001991                           266  
00001991                           267  
00001991                           268      
00002000                           269      ORG    $2000
00002000                           270      
00002000                           271  START:                  ; first instruction of program
00002000                           272  
00002000                           273  
00002000                           274  pSTART   
00002000  227C 00001000            275      MOVEA.L #PROMPT,A1 
00002006  103C 000E                276      MOVE.B #14,D0
0000200A  4E4F                     277      TRAP #15
0000200C  43F8 4000                278      LEA $4000,A1
00002010  103C 0002                279      MOVE.B #2,D0
00002014  4E4F                     280      TRAP #15
00002016                           281      
00002016                           282      
00002016                           283      *COMPARING INPUT TO THE MENU ITEMS*
00002016  207C 0000102D            284      MOVE.L #HELPPROMPT,A0
0000201C  4283                     285      CLR.L D3 ;COUNTER FOR REVERSING A1 TO USER INPUT
0000201E                           286  COMPAREHELP
0000201E  5283                     287      ADD.L #1,D3
00002020  B308                     288      CMPM.B (A0)+,(A1)+
00002022  6600 000E                289      BNE COMPAREMDSP
00002026  0C28 0000 FFFF           290      CMPI.B #00,-1(A0)   ;CHECK IF THE BYTE JUST COMPARED WAS NULL TERMINATOR
0000202C  66F0                     291      BNE COMPAREHELP
0000202E  6100 015C                292      BSR HELPFUNCTION 
00002032                           293  
00002032                           294  COMPAREMDSP
00002032  93C3                     295      SUB.L D3,A1
00002034  4283                     296      CLR.L D3
00002036  207C 00001032            297      MOVE.L #MDSPPROMPT,A0
0000203C                           298  COMPAREMDSP2
0000203C  5283                     299      ADD.L #1,D3
0000203E  B308                     300      CMPM.B (A0)+,(A1)+
00002040  6600 000E                301      BNE COMPARESORTW
00002044  0C28 0000 FFFF           302      CMPI.B #0,-1(A0)
0000204A  66F0                     303      BNE COMPAREMDSP2
0000204C  6100 014E                304      BSR MDSPFUNCTION ;CHANGE THIS WHEN YOU IMPLEMENT THE FUNCTION
00002050                           305     
00002050                           306  COMPARESORTW
00002050  93C3                     307      SUB.L D3,A1
00002052  4283                     308      CLR.L D3
00002054  207C 00001037            309      MOVE.L #SORTWPROMPT,A0
0000205A                           310  COMPARESORTW2
0000205A  5283                     311      ADD.L #1,D3
0000205C  B308                     312      CMPM.B (A0)+,(A1)+
0000205E  6600 000E                313      BNE COMPAREMM
00002062  0C28 0000 FFFF           314      CMPI.B #0,-1(A0)
00002068  66F0                     315      BNE COMPARESORTW2
0000206A  6100 0140                316      BSR SORTWFUNCTION ;CHANGE THIS WHEN YOU IMPLEMENT THE FUNCTION
0000206E                           317  
0000206E                           318  COMPAREMM
0000206E  93C3                     319      SUB.L D3,A1
00002070  4283                     320      CLR.L D3
00002072  207C 0000103D            321      MOVE.L #MMPROMPT,A0
00002078                           322  COMPAREMM2
00002078  5283                     323      ADD.L #1,D3
0000207A  B308                     324      CMPM.B (A0)+,(A1)+
0000207C  6600 000E                325      BNE COMPAREMS
00002080  0C28 0000 FFFF           326      CMPI.B #0,-1(A0)
00002086  66F0                     327      BNE COMPAREMM2
00002088  6100 0132                328      BSR MMFUNCTION ;CHANGE THIS WHEN YOU IMPLEMENT THE FUNCTION
0000208C                           329  
0000208C                           330  COMPAREMS
0000208C  93C3                     331      SUB.L D3,A1
0000208E  4283                     332      CLR.L D3
00002090  207C 00001040            333      MOVE.L #MSPROMPT,A0
00002096                           334  COMPAREMS2
00002096  5283                     335      ADD.L #1,D3
00002098  B308                     336      CMPM.B (A0)+,(A1)+
0000209A  6600 000E                337      BNE COMPAREBF
0000209E  0C28 0000 FFFF           338      CMPI.B #0,-1(A0)
000020A4  66F0                     339      BNE COMPAREMS2
000020A6  6100 0124                340      BSR MSFUNCTION ;CHANGE THIS WHEN YOU IMPLEMENT THE FUNCTION
000020AA                           341  
000020AA                           342  COMPAREBF
000020AA  93C3                     343      SUB.L D3,A1
000020AC  4283                     344      CLR.L D3
000020AE  207C 00001043            345      MOVE.L #BFPROMPT,A0
000020B4                           346  COMPAREBF2
000020B4  5283                     347      ADD.L #1,D3
000020B6  B308                     348      CMPM.B (A0)+,(A1)+
000020B8  6600 000E                349      BNE COMPAREBMOV
000020BC  0C28 0000 FFFF           350      CMPI.B #0,-1(A0)
000020C2  66F0                     351      BNE COMPAREBF2
000020C4  6100 0116                352      BSR BFFUNCTION ;CHANGE THIS WHEN YOU IMPLEMENT THE FUNCTION
000020C8                           353  
000020C8                           354  COMPAREBMOV
000020C8  93C3                     355      SUB.L D3,A1
000020CA  4283                     356      CLR.L D3
000020CC  207C 00001046            357      MOVE.L #BMOVPROMPT,A0
000020D2                           358  COMPAREBMOV2
000020D2  5283                     359      ADD.L #1,D3
000020D4  B308                     360      CMPM.B (A0)+,(A1)+
000020D6  6600 000E                361      BNE COMPAREBTST
000020DA  0C28 0000 FFFF           362      CMPI.B #0,-1(A0)
000020E0  66F0                     363      BNE COMPAREBMOV2
000020E2  6100 0108                364      BSR BMOVFUNCTION ;CHANGE THIS WHEN YOU IMPLEMENT THE FUNCTION
000020E6                           365  
000020E6                           366  COMPAREBTST
000020E6  93C3                     367      SUB.L D3,A1
000020E8  4283                     368      CLR.L D3
000020EA  207C 0000104B            369      MOVE.L #BTSTPROMPT,A0
000020F0                           370  COMPAREBTST2
000020F0  5283                     371      ADD.L #1,D3
000020F2  B308                     372      CMPM.B (A0)+,(A1)+
000020F4  6600 000E                373      BNE COMPAREBSCH
000020F8  0C28 0000 FFFF           374      CMPI.B #0,-1(A0)
000020FE  66F0                     375      BNE COMPAREBTST2
00002100  6100 00FA                376      BSR BTSTFUNCTION ;CHANGE THIS WHEN YOU IMPLEMENT THE FUNCTION
00002104                           377  
00002104                           378  COMPAREBSCH
00002104  93C3                     379      SUB.L D3,A1
00002106  4283                     380      CLR.L D3
00002108  207C 00001050            381      MOVE.L #BSCHPROMPT,A0
0000210E                           382  COMPAREBSCH2
0000210E  5283                     383      ADD.L #1,D3
00002110  B308                     384      CMPM.B (A0)+,(A1)+
00002112  6600 000E                385      BNE COMPAREGO
00002116  0C28 0000 FFFF           386      CMPI.B #0,-1(A0)
0000211C  66F0                     387      BNE COMPAREBSCH2
0000211E  6100 00EC                388      BSR BSCHFUNCTION ;CHANGE THIS WHEN YOU IMPLEMENT THE FUNCTION
00002122                           389  
00002122                           390  COMPAREGO
00002122  93C3                     391      SUB.L D3,A1
00002124  4283                     392      CLR.L D3
00002126  207C 00001055            393      MOVE.L #GOPROMPT,A0
0000212C                           394  COMPAREGO2
0000212C  5283                     395      ADD.L #1,D3
0000212E  B308                     396      CMPM.B (A0)+,(A1)+
00002130  6600 000E                397      BNE COMPAREDF
00002134  0C28 0000 FFFF           398      CMPI.B #0,-1(A0)
0000213A  66F0                     399      BNE COMPAREGO2
0000213C  6100 00DE                400      BSR GOFUNCTION ;CHANGE THIS WHEN YOU IMPLEMENT THE FUNCTION
00002140                           401  
00002140                           402  COMPAREDF
00002140  93C3                     403      SUB.L D3,A1
00002142  4283                     404      CLR.L D3
00002144  207C 00001058            405      MOVE.L #DFPROMPT,A0
0000214A                           406  COMPAREDF2
0000214A  5283                     407      ADD.L #1,D3
0000214C  B308                     408      CMPM.B (A0)+,(A1)+
0000214E  6600 000E                409      BNE COMPAREEXIT
00002152  0C28 0000 FFFF           410      CMPI.B #0,-1(A0)
00002158  66F0                     411      BNE COMPAREDF2
0000215A  6100 00D0                412      BSR DFFUNCTION ;CHANGE THIS WHEN YOU IMPLEMENT THE FUNCTION
0000215E                           413  
0000215E                           414      
0000215E                           415  COMPAREEXIT
0000215E  93C3                     416      SUB.L D3,A1
00002160  4283                     417      CLR.L D3
00002162  207C 0000105B            418      MOVE.L #EXITPROMPT,A0
00002168                           419  COMPAREEXIT2
00002168  5283                     420      ADD.L #1,D3
0000216A  B308                     421      CMPM.B (A0)+,(A1)+
0000216C  6600 000E                422      BNE FAIL
00002170  0C28 0000 FFFF           423      CMPI.B #0,-1(A0)
00002176  66F0                     424      BNE COMPAREEXIT2
00002178  6100 00C2                425      BSR EXITFUNCTION 
0000217C                           426      
0000217C                           427      
0000217C                           428      
0000217C                           429  *WHEN INPUT DOESNT FIT THE CRITERIA*    
0000217C                           430  FAIL
0000217C  227C 0000100D            431      MOVEA.L #NOPROMPT,A1     
00002182  103C 000D                432      MOVE.B #13,D0
00002186  4E4F                     433      TRAP #15
00002188  6000 FE76                434      BRA pSTART
0000218C                           435        
0000218C                           436  HELPFUNCTION
0000218C  227C 00001060            437      MOVEA.L #HELP,A1     
00002192  103C 000D                438      MOVE.B #13,D0
00002196  4E4F                     439      TRAP #15
00002198  6000 FE66                440      BRA pSTART
0000219C                           441      
0000219C                           442  MDSPFUNCTION
0000219C  227C 00001032            443      MOVEA.L #MDSPPROMPT,A1     
000021A2  103C 000D                444      MOVE.B #13,D0
000021A6  4E4F                     445      TRAP #15
000021A8  6000 FE56                446      BRA pSTART
000021AC                           447  
000021AC                           448  SORTWFUNCTION
000021AC  227C 00001037            449      MOVEA.L #SORTWPROMPT,A1     
000021B2  103C 000D                450      MOVE.B #13,D0
000021B6  4E4F                     451      TRAP #15
000021B8  6000 FE46                452      BRA pSTART
000021BC                           453  
000021BC                           454  MMFUNCTION
000021BC  227C 0000103D            455      MOVEA.L #MMPROMPT,A1     
000021C2  103C 000D                456      MOVE.B #13,D0
000021C6  4E4F                     457      TRAP #15
000021C8  6000 FE36                458      BRA pSTART
000021CC                           459  
000021CC                           460  MSFUNCTION
000021CC  227C 00001040            461      MOVEA.L #MSPROMPT,A1     
000021D2  103C 000D                462      MOVE.B #13,D0
000021D6  4E4F                     463      TRAP #15
000021D8  6000 FE26                464      BRA pSTART
000021DC                           465  
000021DC                           466  BFFUNCTION
000021DC  227C 00001043            467      MOVEA.L #BFPROMPT,A1     
000021E2  103C 000D                468      MOVE.B #13,D0
000021E6  4E4F                     469      TRAP #15
000021E8  6000 FE16                470      BRA pSTART
000021EC                           471  
000021EC                           472  BMOVFUNCTION
000021EC  227C 00001046            473      MOVEA.L #BMOVPROMPT,A1     
000021F2  103C 000D                474      MOVE.B #13,D0
000021F6  4E4F                     475      TRAP #15
000021F8  6000 FE06                476      BRA pSTART
000021FC                           477  
000021FC                           478  BTSTFUNCTION
000021FC  227C 0000104B            479      MOVEA.L #BTSTPROMPT,A1     
00002202  103C 000D                480      MOVE.B #13,D0
00002206  4E4F                     481      TRAP #15
00002208  6000 FDF6                482      BRA pSTART
0000220C                           483  
0000220C                           484  BSCHFUNCTION
0000220C  227C 00001050            485      MOVEA.L #BSCHPROMPT,A1     
00002212  103C 000D                486      MOVE.B #13,D0
00002216  4E4F                     487      TRAP #15
00002218  6000 FDE6                488      BRA pSTART
0000221C                           489  
0000221C                           490  GOFUNCTION
0000221C  227C 00001055            491      MOVEA.L #GOPROMPT,A1     
00002222  103C 000D                492      MOVE.B #13,D0
00002226  4E4F                     493      TRAP #15
00002228  6000 FDD6                494      BRA pSTART
0000222C                           495  
0000222C                           496  DFFUNCTION
0000222C  227C 00001058            497      MOVEA.L #DFPROMPT,A1     
00002232  103C 000D                498      MOVE.B #13,D0
00002236  4E4F                     499      TRAP #15
00002238  6000 FDC6                500      BRA pSTART
0000223C                           501  
0000223C                           502  
0000223C                           503  EXITFUNCTION
0000223C  103C 0009                504      MOVE.B #9,D0
00002240  4E4F                     505      TRAP #15
00002242                           506  
00002242                           507  
00002242                           508  
00002242                           509  
00002242                           510  
00002242                           511      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BFFUNCTION          21DC
BFPROMPT            1043
BMOVFUNCTION        21EC
BMOVPROMPT          1046
BSCHFUNCTION        220C
BSCHPROMPT          1050
BTSTFUNCTION        21FC
BTSTPROMPT          104B
COMPAREBF           20AA
COMPAREBF2          20B4
COMPAREBMOV         20C8
COMPAREBMOV2        20D2
COMPAREBSCH         2104
COMPAREBSCH2        210E
COMPAREBTST         20E6
COMPAREBTST2        20F0
COMPAREDF           2140
COMPAREDF2          214A
COMPAREEXIT         215E
COMPAREEXIT2        2168
COMPAREGO           2122
COMPAREGO2          212C
COMPAREHELP         201E
COMPAREMDSP         2032
COMPAREMDSP2        203C
COMPAREMM           206E
COMPAREMM2          2078
COMPAREMS           208C
COMPAREMS2          2096
COMPARESORTW        2050
COMPARESORTW2       205A
DFFUNCTION          222C
DFPROMPT            1058
EXITFUNCTION        223C
EXITPROMPT          105B
FAIL                217C
GOFUNCTION          221C
GOPROMPT            1055
HELP                1060
HELPFUNCTION        218C
HELPPROMPT          102D
MDSPFUNCTION        219C
MDSPPROMPT          1032
MMFUNCTION          21BC
MMPROMPT            103D
MSFUNCTION          21CC
MSPROMPT            1040
NOPROMPT            100D
PROMPT              1000
PSTART              2000
SORTWFUNCTION       21AC
SORTWPROMPT         1037
START               2000
